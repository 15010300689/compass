@import "compass/css3/animation";
@import "compass/css3/opacity";
@import "true";

$some-default-value: some default value;
@function has-default-arglist($arglist...) {
  @return set-arglist-default($arglist, $some-default-value);
}

@mixin with-declared-support($browsers) {
  $old-browsers: $supported-browsers;
  $supported-browsers: $browsers;
  @content;
  $supported-browsers: $old-browsers;
}

@mixin with-declared-minimums($supported-browsers) {
    $old-mins: $browser-minimum-versions;
    $browser-minimum-versions: $supported-browsers;
    @content;
    $browser-minimum-versions: $old-mins;
}

@include test-module('Compass Support') {
  @include test('[function] set-arglist-default() with no arguments') {
    @include assert-true(
               has-default-arglist() == $some-default-value,
               'No arguments should get a default value.');
  }
  @include test('[function] set-arglist-default() with a "default" argument') {
    @include assert-true(
               nth(has-default-arglist(default), 1) == $some-default-value,
               'an argument of "default" should get a default value.');
  }
  @include test('[function] set-arglist-default() with a "default" argument and another argument') {
    @include assert-true(
               has-default-arglist(default, some other value) == ($some-default-value, some other value),
               'an argument of "default" should get a default value.');
  }
  @include test('[function] set-arglist-default() with a "default" argument not first and another argument') {
    @include assert-true(
               has-default-arglist(some other value, default) == (some other value, $some-default-value),
               'an argument of "default" should get a default value.');
  }

  @include test('[function] support-legacy-browser() from threshold') {
    @include assert-true(support-legacy-browser('ie', '6', 0.00000001),
                         "should be supported because of user support threshold.");
    @include assert-false(support-legacy-browser('ie', '6', 10.000),
                          "should not be supported because of support threshold.");
  }

  @include test('[function] support-legacy-browser() from minimums') {
    @include with-declared-minimums(('ie': '7')) {
      @include assert-true(support-legacy-browser('ie', '7', 10.00),
      "should be supported because of minimum version.");
      @include assert-false(support-legacy-browser('ie', '6', 10.000),
      "should not be supported because of minimum version.");
    }
  }

  @include test('[function] browser-out-of-scope() with no scope') {
    @include assert-true(not browser-out-of-scope('ie'), "should be in scope.");
    @include assert-true(not browser-out-of-scope('chrome'), "should be in scope.");
  }

  @include test('[function] browser-out-of-scope() with a scope') {
    @include with-prefix(browser-prefix('chrome')) {
      @include assert-true(not browser-out-of-scope('chrome'), "should be in scope.");
      @include assert-false(not browser-out-of-scope('ie'), "should not be in scope.");
    }
  }

  @include test('[function] browser-out-of-scope() with version') {
    @include with-browser-minimums((ie: '8')) {
      @include assert-true(not browser-out-of-scope('ie', '10'), "should be in scope.");
      @include assert-true(not browser-out-of-scope('ie', '8'), "should be in scope.");
      @include assert-false(not browser-out-of-scope('ie', '7'), "should not be in scope.");
    }
  }

  @include test('[mixin] with-prefix()') {
    @include assert-true($current-prefix == null, "should be null.");
    @include with-prefix(-webkit) {
      @include assert-true($current-prefix == -webkit, "should be set.");
      $called: false;
      @include with-prefix(-webkit) {
        $called: true;
      }
      @include assert-true($called, "should be called.");
      $called: false;
      @include with-prefix(-ms) {
        $called: true;
      }
      @include assert-false($called, "should not be called.");
    }
  }

  @include test('[mixin] with-each-prefix()') {
    $prefixes: ();
    @include with-each-prefix(css-regions, 0.0001) {
      $prefixes: append($prefixes, $current-prefix);
    }
    @include assert-equal((-ms -webkit null), $prefixes, "Not equal");
  }

  @include test('[mixin] with-each-prefix() respects $supported-browsers') {
    @include with-declared-support("ie") {
      $prefixes: ();
      @include with-each-prefix(css-regions, 0.0001) {
        $prefixes: append($prefixes, $current-prefix);
      }
      @include assert-equal((-ms null), $prefixes, "Not equal");
    }
  }

  @include test('[mixin] with-each-prefix() respects $current-prefix') {
    @include with-prefix(-webkit) {
      $prefixes: ();
      @include with-each-prefix(css-regions, 0.0001) {
        $prefixes: append($prefixes, $current-prefix);
      }
      @include assert-equal(false, index($prefixes, null), "Not not have a null");
      @include assert-equal("-webkit", #{$prefixes}, "Not equal");
    }
  }
}

@include with-browser-support-debugging {
  @include keyframes(foo) {
    0% { @include opacity(0); }
    100% { @include opacity(1); }
  }
  .foo {
    @include animation(foo 1s);
  }
}
