@import "shared";

// CSS Transitions
// Currently only works in Webkit.
//
// * expected in CSS3, FireFox 3.6/7 and Opera Presto 2.3
// * We'll be prepared.
//
// Including this submodule sets following defaults for the mixins:
//
//     $default-transition-property : all
//     $default-transition-duration : 1s
//     $default-transition-function : false
//     $default-transition-delay    : false
//
// Override them if you like. Timing-function and delay are set to false for browser defaults (ease, 0s).

$default-transition-property: all !default;

$default-transition-duration: 1s !default;

$default-transition-function: false !default;

$default-transition-delay: false !default;

$transitionable-prefixed-properties: transform, transform-origin !default;

// One or more properties to transition
//
// * for multiple, use a comma-delimited list
// * also accepts "all" or "none"

@mixin transition-property($properties: $default-transition-property) {
  @if type-of($properties) == string { $properties: unquote($properties); }
  $raw-properties: ($properties);

  $webkit-transition-property: compact(false);
  $moz-transition-property: compact(false);
  $ms-transition-property: compact(false);
  $o-transition-property: compact(false);

  @each $property in $raw-properties {
    $match: false;

    @each $prefixed-property in $transitionable-prefixed-properties {
      @if $property == $prefixed-property {
        $match: true;
      }
    }

    @if $match {
      $webkit-transition-property: append($webkit-transition-property, -webkit-#{$property}, comma);
      $moz-transition-property: append($moz-transition-property, -moz-#{$property}, comma);
      $ms-transition-property: append($ms-transition-property, -ms-#{$property}, comma);
      $o-transition-property: append($o-transition-property, -o-#{$property}, comma);
    } @else {
      $webkit-transition-property: append($webkit-transition-property, $property, comma);
      $moz-transition-property: append($moz-transition-property, $property, comma);
      $ms-transition-property: append($ms-transition-property, $property, comma);
      $o-transition-property: append($o-transition-property, $property, comma);
    }
  }

  @if $experimental-support-for-webkit    { -webkit-transition-property: $webkit-transition-property; }
  @if $experimental-support-for-mozilla   { -moz-transition-property: $moz-transition-property; }
  @if $experimental-support-for-microsoft { -ms-transition-property: $ms-transition-property; }
  @if $experimental-support-for-opera     { -o-transition-property: $o-transition-property; }
  transition-property: $properties;
}

// One or more durations in seconds
//
// * for multiple, use a comma-delimited list
// * these durations will affect the properties in the same list position

@mixin transition-duration($duration: $default-transition-duration) {
  @if type-of($duration) == string { $duration: unquote($duration); }
  @include experimental(transition-duration, $duration,
    -moz, -webkit, -o, -ms, not -khtml, official
  );
}

// One or more timing functions
//
// * [ ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier(x1, y1, x2, y2)]
// * For multiple, use a comma-delimited list
// * These functions will effect the properties in the same list position

@mixin transition-timing-function($function: $default-transition-function) {
  @include experimental(transition-timing-function, unquote($function),
    -moz, -webkit, -o, -ms, not -khtml, official
  );
}

// One or more transition-delays in seconds
//
// * for multiple, use a comma-delimited list
// * these delays will effect the properties in the same list position

@mixin transition-delay($delay: $default-transition-delay) {
  @if type-of($delay) == string { $delay: unquote($delay); }
  @include experimental(transition-delay, $delay,
    -moz, -webkit, -o, -ms, not -khtml, official
  );
}

// Transition all-in-one shorthand

@mixin single-transition(
  $property: $default-transition-property,
  $duration: $default-transition-duration,
  $function: $default-transition-function,
  $delay: $default-transition-delay
) {
  $match: false;

  @each $prefixed-property in $transitionable-prefixed-properties {
    @if $property == $prefixed-property {
      $match: true;
    }
  }

  @if $property and $duration and $function {
    // Shorthand (see https://github.com/chriseppstein/compass/issues/585)
    @if $delay {
      @if $match {
        @if $experimental-support-for-webkit    { -webkit-transition: -webkit-#{$property} $duration $function; -webkit-transition-delay: $delay; }
        @if $experimental-support-for-mozilla   { -moz-transition: -moz-#{$property} $duration $function $delay; }
        @if $experimental-support-for-microsoft { -ms-transition: -ms-#{$property} $duration $function $delay; }
        @if $experimental-support-for-opera     { -o-transition: -o-#{$property} $duration $function $delay; }
        transition: $property $duration $function $delay;
      } @else {
        @if $experimental-support-for-webkit    { -webkit-transition: $property $duration $function; -webkit-transition-delay: $delay; }
        @include experimental(transition, $property $duration $function $delay,
          -moz,
          not -webkit,
          -o,
          -ms,
          not -khtml,
          official
        );
      }
    }
    @else {
      @if $match {
        @if $experimental-support-for-webkit    { -webkit-transition: -webkit-#{$property} $duration $function; }
        @if $experimental-support-for-mozilla   { -moz-transition: -moz-#{$property} $duration $function; }
        @if $experimental-support-for-microsoft { -ms-transition: -ms-#{$property} $duration $function; }
        @if $experimental-support-for-opera     { -o-transition: -o-#{$property} $duration $function; }
        transition: $property $duration $function;
      } @else {
        @include experimental(transition, $property $duration $function,
          -moz,
          -webkit,
          -o,
          -ms,
          not -khtml,
          official
        );
      }
    }
  }
  @else {
    @include transition-property($property);
    @include transition-duration($duration);
    @if $function { @include transition-timing-function($function); }
    @if $delay { @include transition-delay($delay); }
  }
}

@mixin transition(
  $transition-1 : default,
  $transition-2 : false,
  $transition-3 : false,
  $transition-4 : false,
  $transition-5 : false,
  $transition-6 : false,
  $transition-7 : false,
  $transition-8 : false,
  $transition-9 : false,
  $transition-10: false
) {
  @if $transition-1 == default {
    $transition-1 : (compact($default-transition-property, $default-transition-duration, $default-transition-function, $default-transition-delay));
  }

  $transition : compact($transition-1, $transition-2, $transition-3, $transition-4, $transition-5, $transition-6, $transition-7, $transition-8, $transition-9, $transition-10);
  @include prefix-friendly-transition($transition);
}

@mixin prefix-friendly-transition($transition) {
  $raw-transition: ($transition);

  $webkit-transition: compact(false);
  $moz-transition: compact(false);
  $ms-transition: compact(false);
  $o-transition: compact(false);

  @each $single-transition in $raw-transition {
    $property: nth($single-transition, 1);
    $match: false;

    @each $prefixed-property in $transitionable-prefixed-properties {
      @if $property == $prefixed-property {
        $match: true;
      }
    }

    @if $match {
      $single-transition-suffix: compact(false);

      @for $i from 2 through length($single-transition) {
        $single-transition-suffix: append($single-transition-suffix, nth($single-transition, $i), space);
      }

      $webkit-transition: append($webkit-transition, compact(join(-webkit-#{$property}, $single-transition-suffix)), comma);
      $moz-transition: append($moz-transition, compact(join(-moz-#{$property}, $single-transition-suffix)), comma);
      $ms-transition: append($ms-transition, compact(join(-ms-#{$property}, $single-transition-suffix)), comma);
      $o-transition: append($o-transition, compact(join(-o-#{$property}, $single-transition-suffix)), comma);
    } @else {
      $webkit-transition: append($webkit-transition, $single-transition, comma);
      $moz-transition: append($moz-transition, $single-transition, comma);
      $ms-transition: append($ms-transition, $single-transition, comma);
      $o-transition: append($o-transition, $single-transition, comma);
    }
  }

  @if $experimental-support-for-webkit    { -webkit-transition: $webkit-transition; }
  @if $experimental-support-for-mozilla   { -moz-transition: $moz-transition; }
  @if $experimental-support-for-microsoft { -ms-transition: $ms-transition; }
  @if $experimental-support-for-opera     { -o-transition: $o-transition; }
  transition: $transition;
}
