@import "shared";
@import "compass/utilities/general/hacks";

@mixin background-image(
  $image-1, $image-2: false, $image-3: false,
  $image-4: false, $image-5: false, $image-6: false,
  $image-7: false, $image-8: false, $image-9: false, $image-10: false
) {
  $images: compact($image-1, $image-2, $image-3, $image-4 ,$image-5, $image-6, $image-7, $image-8, $image-9, $image-10);
  @if $experimental-support-for-webkit and prefixed(-webkit, $images) {
    background-image: -webkit($images);
  }
  @if $experimental-support-for-mozilla and prefixed(-moz, $images) {
    background-image: -moz($images);
  }
  @if $experimental-support-for-svg and prefixed(-svg, $images) {
    background-image: -svg($images);
  }
  background-image: $images;
}

// The linear gradient mixin works best across browsers if you use percentage-based color stops.
//
// Examples:
//
//     // This yields a linear gradient spanning from top to bottom
//     +linear-gradient(color-stops(white, black))
//
//     // This yields a linear gradient spanning from bottom to top
//     +linear-gradient(color-stops(white, black), bottom)
//
//     // This yields a linear gradient spanning from left to right
//     +linear-gradient(color-stops(white, black), left)
//
//     // This yields a linear gradient starting at white passing
//     // thru blue at 33% down and then to black
//     +linear-gradient(color-stops(white, blue 33%, black))
//
//     // This yields a linear gradient starting at white passing
//     // thru blue at 33% down and then to black at 67% until the end
//     +linear-gradient(color-stops(white, blue 33%, black 67%))
//
//     // This yields a background image on top of the gradient; requires an image
//     // with an alpha-layer.
//     +linear-gradient(color_stops(white,black), top, image-url('noise.png'))
//
// Browsers Supported:
//
// - Chrome
// - Safari
// - Firefox 3.6
// - Opera

@mixin linear-gradient($color-stops, $start: top, $image: false) {
  // Firefox's gradient api is nice.
  // Webkit's gradient api sucks -- hence these backflips:
  $background: unquote("");
  @if $image { $background : $image + unquote(", "); }
  $start: unquote($start);
  $end: opposite-position($start);

  @if $experimental-support-for-svg {
    background-image: #{$background}linear-svg-gradient($color-stops, $start);
  }
  @if $experimental-support-for-webkit {
    background-image: #{$background}-webkit-gradient(linear, grad-point($start), grad-point($end), grad-color-stops($color-stops));
  }
  @if $experimental-support-for-mozilla {
    background-image: #{$background}-moz-linear-gradient($start, $color-stops);
  }
  background-image: #{$background}#{linear}-gradient($start, $color-stops);
}

// Emit a IE-Specific filters that renders a simple linear gradient.
// For use in IE 6 - 8. Best practice would have you apply this via a
// conditional IE stylesheet, but if you must, you should place this before
// any background-image properties that you have specified.
@mixin filter-gradient($start-color, $end-color, $orientation: vertical) {
  @include has-layout;
  $gradient-type: if($orientation == vertical, 0, 1);
  filter: progid:DXImageTransform.Microsoft.gradient(gradientType=#{$gradient-type}, startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}');
  -ms-filter: "progid:DXImageTransform.Microsoft.gradient(gradientType=#{$gradient-type}, startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}')";
}

// Because of webkit's limitations, the radial gradient mixin works best if you use
// pixel-based color stops.
//
// Examples:
//
//     // Defaults to a centered, 100px radius gradient
//     +radial-gradient(color-stops(#c00, #00c))
//
//     // 100px radius gradient in the top left corner
//     +radial-gradient(color-stops(#c00, #00c), top left)
//
//     // Three colors, ending at 50px and passing thru #fff at 25px
//     +radial-gradient(color-stops(#c00, #fff, #00c 50px))
//
//     // A background image on top of a 100px radius gradient; requires an image
//     // with an alpha-layer.
//     +radial-gradient(color_stops(#c00, #fff), top left, image-url("noise.png")))
//
// Browsers Supported:
//
// - Chrome
// - Safari
// - Firefox 3.6
// - Opera

@mixin radial-gradient($color-stops, $center-position: center center, $image: false) {
  $center-position: unquote($center-position);
  $end-pos: grad-end-position($color-stops, true);
  $background: unquote("");
  @if $image { $background: $image + unquote(", "); }

  @if $experimental-support-for-svg {
    background-image: #{$background}radial-svg-gradient($color-stops, $center-position);
  }
  @if $experimental-support-for-webkit {
    background-image: #{$background}-webkit-gradient(radial, grad-point($center-position), 0, grad-point($center-position), $end-pos, grad-color-stops($color-stops));
  }
  @if $experimental-support-for-mozilla {
    background-image: #{$background}-moz-radial-gradient($center-position, circle, $color-stops);
  }
  background-image: #{$background}#{radial}-gradient($center-position, circle, $color-stops);
}
